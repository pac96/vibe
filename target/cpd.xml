<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="71" tokens="197">
      <file line="37"
            path="/gpfs/main/home/smayfiel/course/cs032/bacon/src/main/java/edu/brown/cs/smayfiel/autocorrectBacon/BasicRanker.java"/>
      <file line="43"
            path="/gpfs/main/home/smayfiel/course/cs032/bacon/src/main/java/edu/brown/cs/smayfiel/autocorrectBacon/SmartRanker.java"/>
      <codefragment><![CDATA[  public BasicRanker(DictionaryBuilder db) {
    // List of all suggestions
    // System.out.println("br con");
    allsuggestions = new ArrayList<String>();
    this.db = db;
    // Generate trie based on monogram dictionary
    trie = new Trie(db.getMonoMap().keySet());
    // System.out.println("Br end con");
  }

  /**
   * Method to determine which kinds of suggestions to use. This method need not
   * be called if the user wants the default behavior.
   *
   * @param usePrefix
   *          boolean determining if prefix suggestions are found
   * @param useLed
   *          boolean determining if prefix suggestions are found
   * @param maximumEdits
   *          max number of edits, unused if useLed is false
   * @param useWhitespace
   *          boolean determining if prefix suggestions are found
   */
  @Override
  public void setOptions(boolean usePrefix, boolean useLed, int maximumEdits,
      boolean useWhitespace) {
    // Ways to correct
    prefix = usePrefix;
    led = useLed;
    this.maxEdits = maximumEdits;
    whitespace = useWhitespace;
  }

  /**
   * Gets suggestions from the SuggestionGenerator based on which booleans were
   * selected. Then, calls rank() to sort the results, and returns at most the
   * top five.
   *
   * @param previousWord
   *          the second to last token, or null if partialWord is the first
   *          token
   * @param partialWord
   *          the last token
   * @return list of suggestions
   */
  @Override
  public List<String> getRankedSuggestions(String previousWord,
      String partialWord) {
    // Make sure there are no suggestions before starting
    allsuggestions.clear();
    // Get suggestions from whichever methods specified
    SuggestionGenerator sg = new SuggestionGenerator(trie);
    if (prefix) {
      allsuggestions.addAll(sg.autocomplete(partialWord));
    }
    if (led) {
      allsuggestions.addAll(sg.autocorrect(partialWord, maxEdits));
    }
    if (whitespace) {
      allsuggestions.addAll(sg.whitespace(partialWord));
    }
    // Rank all suggestions and return top five
    // If no suggestions, return partialWord if it is a word
    if (allsuggestions.size() == 0) {
      if (trie.findPrefixEnd(partialWord) != null
          && trie.findPrefixEnd(partialWord).isEnd()) {
        allsuggestions.add(partialWord);
      }
      return allsuggestions;
    }
    this.rank(previousWord, partialWord);]]></codefragment>
   </duplication>
</pmd-cpd>